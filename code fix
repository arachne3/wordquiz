#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <ctype.h>

/* Hi */

typedef enum {
    C_ZERO,
    C_LIST,
    C_SHOW,
    C_TEST,
    C_EXIT,
    C_ADD, // 단어 추가 메뉴 추가
} command_t;


char *read_a_line(FILE *fp) {
    static char buf[BUFSIZ];
    static int buf_n = 0;
    static int curr = 0;

    if (feof(fp) && curr == buf_n - 1)
        return NULL;

    char *s = NULL;
    size_t s_len = 0;
    do {
        int end = curr;
        while (!(end >= buf_n || !iscntrl(buf[end]))) {
            end++;
        }
        if (curr < end && s != NULL) {
            curr = end;
            break;
        }
        curr = end;
        while (!(end >= buf_n || iscntrl(buf[end]))) {
            end++;
        }
        if (curr < end) {
            if (s == NULL) {
                s = strndup(buf + curr, end - curr);
                s_len = end - curr;
            } else {
                s = realloc(s, s_len + end - curr + 1);
                strncat(s, buf + curr, end - curr);
                s_len += end - curr;
            }
        }
        if (end < buf_n) {
            curr = end + 1;
            break;
        }

        buf_n = fread(buf, 1, sizeof(buf), fp);
        curr = 0;
    } while (buf_n > 0);
    return s;
}

void print_menu() {
    printf("1. List all wordbooks\n");
    printf("2. Show the words in a wordbook\n");
    printf("3. Test with a wordbook\n");
    printf("4.Add a word to a wordbook\n"); // 단어 추가 메뉴 추가
    printf("5. Exit\n");
}

int get_command() {
    int cmd;
    printf(">");
    scanf("%d", &cmd);
    getchar();  // 개행 문자를 처리하기 위해 추가
    return cmd;
}

void add_word() { // 단어 추가 함수 추가
    char wordbook[128];
    char filepath[256];
    char word[128];
    char meaning[256];

    list_wordbooks();
    printf("Type in the name of the wordbook?\n");
    printf(">");
    fgets(wordbook, sizeof(wordbook), stdin);
    wordbook[strcspn(wordbook, "\n")] = '\0'; // 개행 문자 제거
    sprintf(filepath, "wordbooks/%s", wordbook);
    
    FILE *fp = fopen(filepath, "a");
    if (!fp) {
        printf("Could not open wordbook: %s\n", wordbook);
        return;
    }

    printf("Enter the word: ");
    fgets(word, sizeof(word), stdin);
    word[strcspn(word, "\n")] = '\0'; // 개행 문자 제거

    printf("Enter the meaning: ");
    fgets(meaning, sizeof(meaning), stdin);
    meaning[strcspn(meaning, "\n")] = '\0'; // 개행 문자 제거

    fprintf(fp, "\"%s\" : \"%s\"\n", word, meaning);
    fclose(fp);

    printf("Word added successfully.\n");
}

void list_wordbooks() {
    DIR *d = opendir("wordbooks");
    printf("\n  ----\n");
    struct dirent *wb;
    while ((wb = readdir(d)) != NULL) {
        if (strcmp(wb->d_name, ".") != 0 && strcmp(wb->d_name, "..") != 0) {
            printf("  %s\n", wb->d_name);
        }
    }
    closedir(d);
    printf("  ----\n");
}

void show_words() {
    char wordbook[128];
    char filepath[256];
    list_wordbooks();
    printf("Type in the name of the wordbook?\n");
    printf(">");
    fgets(wordbook, sizeof(wordbook), stdin);
    wordbook[strcspn(wordbook, "\n")] = '\0'; // remove trailing newline
    sprintf(filepath, "wordbooks/%s", wordbook);
    FILE *fp = fopen(filepath, "r");
    printf("\n  -----\n");
    char *line;
    while ((line = read_a_line(fp))) {
        char *word = strtok(line, "\"");
        strtok(NULL, "\"");
        char *meaning = strtok(NULL, "\"");
        printf("  %s : %s\n", word, meaning);
        free(line);
    }
    printf("  -----\n\n");
    fclose(fp);
}

void run_test() {
    char wordbook[128];
    char filepath[256];
    printf("Type in the name of the wordbook?\n");
    printf(">");
    fgets(wordbook, sizeof(wordbook), stdin);
    wordbook[strcspn(wordbook, "\n")] = '\0'; // remove trailing newline
    sprintf(filepath, "wordbooks/%s", wordbook);
    FILE *fp = fopen(filepath, "r");
    printf("\n-----\n");
    int n_questions = 0;
    int n_correct = 0;
    char *line;
    while ((line = read_a_line(fp))) {
        char *word = strtok(line, "\"");
        strtok(NULL, "\"");
        char *meaning = strtok(NULL, "\"");
        printf("Q. %s\n", meaning);
        printf("?  ");
        char answer[128];
        scanf("%s", answer);
        if (strcmp(answer, word) == 0) {
            printf("- correct\n");
            n_correct++;
        } else {
            printf("- wrong: %s\n", word);
        }
        n_questions++;
        free(line);
    }
    printf("(%d/%d)\n", n_correct, n_questions);
    printf("-----\n\n");
    fclose(fp);
}

int main() {
    printf(" *** Word Quiz *** \n\n");
    int cmd;
    do {
        print_menu();
        cmd = get_command();
        switch (cmd) {
            case C_LIST: {
                list_wordbooks();
                break;
            }
            case C_SHOW: {
                show_words();
                break;
            }
            case C_TEST: {
                run_test();
                break;
            }
            case C_ADD: { // 단어 추가 메뉴 추가
                add_word();
                break;
            }
            case C_EXIT: {
                return EXIT_SUCCESS;
            }
        }
    } while (cmd != C_EXIT);
    return EXIT_SUCCESS;
}